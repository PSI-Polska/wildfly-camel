{
 "component": {
    "kind": "component",
    "scheme": "http",
    "alternativeSchemes": "http,https",
    "syntax": "http:httpUri",
    "title": "HTTP",
    "description": "For calling out to external HTTP servers using Apache HTTP Client 3.x.",
    "label": "http",
    "deprecated": "false",
    "async": "false",
    "producerOnly": "true",
    "lenientProperties": "true",
    "javaType": "org.apache.camel.component.http.HttpComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-http",
    "version": "2.18.1"
  },
  "componentProperties": {
    "httpClientConfigurer": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.http.HttpClientConfigurer", "deprecated": "false", "secret": "false", "description": "To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used." },
    "httpConnectionManager": { "kind": "property", "type": "object", "javaType": "org.apache.commons.httpclient.HttpConnectionManager", "deprecated": "false", "secret": "false", "description": "To use a custom HttpConnectionManager to manage connections" },
    "httpBinding": { "kind": "property", "type": "object", "javaType": "org.apache.camel.http.common.HttpBinding", "deprecated": "false", "secret": "false", "description": "To use a custom HttpBinding to control the mapping between Camel message and HttpClient." },
    "httpConfiguration": { "kind": "property", "type": "object", "javaType": "org.apache.camel.http.common.HttpConfiguration", "deprecated": "false", "secret": "false", "description": "To use the shared HttpConfiguration as base configuration." },
    "allowJavaSerializedObject": { "kind": "property", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "description": "Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk." },
    "headerFilterStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." }
  },
  "properties": {
    "httpUri": { "kind": "path", "group": "producer", "label": "producer", "required": "true", "type": "string", "javaType": "java.net.URI", "deprecated": "false", "secret": "false", "description": "The url of the HTTP endpoint to call." },
    "disableStreamCache": { "kind": "parameter", "group": "common", "label": "common", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body." },
    "authMethodPriority": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "Basic", "Digest", "NTLM" ], "deprecated": "false", "secret": "false", "description": "Authentication method for proxy either as Basic Digest or NTLM." },
    "bridgeEndpoint": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint's URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back." },
    "chunked": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response" },
    "connectionClose": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false." },
    "copyHeaders": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers)." },
    "headerFilterStrategy": { "kind": "parameter", "group": "producer", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." },
    "httpBinding": { "kind": "parameter", "group": "producer", "type": "object", "javaType": "org.apache.camel.http.common.HttpBinding", "deprecated": "false", "secret": "false", "description": "To use a custom HttpBinding to control the mapping between Camel message and HttpClient." },
    "ignoreResponseBody": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If this option is true The http producer won't read response body and cache the input stream" },
    "okStatusCodeRange": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "defaultValue": "200-299", "description": "The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included." },
    "preserveHostHeader": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL's for a proxied service" },
    "proxyHost": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "The proxy host name" },
    "proxyPort": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "description": "The proxy port number" },
    "throwExceptionOnFailure": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code." },
    "transferException": { "kind": "parameter", "group": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk." },
    "urlRewrite": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "object", "javaType": "org.apache.camel.http.common.UrlRewrite", "deprecated": "false", "secret": "false", "description": "Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html" },
    "httpClientConfigurer": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.http.HttpClientConfigurer", "deprecated": "false", "secret": "false", "description": "Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc" },
    "httpClientOptions": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "httpClient.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure the HttpClient using the key/values from the Map." },
    "httpConnectionManager": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.commons.httpclient.HttpConnectionManager", "deprecated": "false", "secret": "false", "description": "To use a custom HttpConnectionManager to manage connections" },
    "httpConnectionManagerOptions": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "httpConnectionManager.", "multiValue": "true", "deprecated": "false", "secret": "false", "description": "To configure the HttpConnectionManager using the key/values from the Map." },
    "mapHttpMessageBody": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping." },
    "mapHttpMessageFormUrlEncodedBody": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping." },
    "mapHttpMessageHeaders": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping." },
    "synchronous": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

